def tagName="latest"
def branchName="master"

pipeline {
  agent any

  environment {
    EMAIL_RECIPIENTS = 'mk.choumiyan@gmail.com'
  }

  stages {
      stage('Checkout') {
        steps {
            echo "***Branch:"+branchName+"***"
            echo "***Tag:"+tagName+"***"
            //checkout SCM
            checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false,
            extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-credentials',
            url: 'https://github.com/ManishKr-Git/shop-master.git']]])
        }
      }

      stage('Reading properties file') {
        steps{
            script {data = readYaml file: 'cicd/pipeline-properties.yaml'}
            echo "loading file...."
        }
      }

      stage('BUILD'){
        steps{
            echo "Building ${data.parent.projectName}"
            dir("backend-app/shop-manager/"){
                bat './mvnw clean install'
                echo "loading file...."
            }
            echo "Build is successful"
        }
      }

      stage('Create Dockerfile') {
                  steps {
                      script {
                          def backend = "${data.parent.projectName}/backend-app/shop-manager/"
                          def dockerFile = "Dockerfile"
                          writeFile file: "${dockerFile}", text: """
                              FROM openjdk:8-jdk-alpine
                              WORKDIR /app
                              COPY backend-app/shop-manager/target/${backend}.jar ${backend}.jar
                              ENTRYPOINT ["java","-jar","${backend}.jar"]
                          """
                      }
                  }
              }

              stage('Build Docker Image') {
                  steps {
                      script {
                          def imageTag = "${data.parent.imageTag}"
                          def image = "${registry}/${repoName}:${imageTag}"
                          sh "docker build -t ${image} ."
                      }
                  }
              }
  }
}
